-*

Create a folder called learn_git.
Cd (change directory) into the learn_git folder.
Create a file called third.txt.
Initialize an empty git repository.
Add third.txt to the staging area.
Commit with the message "adding third.txt".
Check out your commit with git log.
Create another file called fourth.txt.
Add fourth.txt to the staging area.
Commit with the message "adding fourth.txt"
Remove the third.txt file.
Add this change to the staging area. (Using the command "git add . "
Commit with the message "removing third.txt".
Check out your commits using git log.
Change your global settings to core.pager=cat - you can read more about that here.
Write the appropriate command to list all the global configurations for git on your machine.
You can type git config --global to find out how to do this.

-----------------------------------------------------------------------------------------------------

Microsoft Windows [Version 10.0.22631.4169]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omar>cd Desktop

C:\Users\omar\Desktop>makdir learn_git
'makdir' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\omar\Desktop>mkdir learn_git

C:\Users\omar\Desktop>cd learn_git

C:\Users\omar\Desktop\learn_git>touch third.txt
'touch' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\omar\Desktop\learn_git>>>third.txt
The syntax of the command is incorrect.

C:\Users\omar\Desktop\learn_git>echo third.txt
third.txt

C:\Users\omar\Desktop\learn_git>echo bonjour > third.txt

C:\Users\omar\Desktop\learn_git>echo > third.txt

C:\Users\omar\Desktop\learn_git>git init
Initialized empty Git repository in C:/Users/omar/Desktop/learn_git/.git/

C:\Users\omar\Desktop\learn_git>git add.
git: 'add.' is not a git command. See 'git --help'.

The most similar command is
        add

C:\Users\omar\Desktop\learn_git>git add .

C:\Users\omar\Desktop\learn_git>git commit "adding third.txt"
error: pathspec 'adding third.txt' did not match any file(s) known to git

C:\Users\omar\Desktop\learn_git>git commit -m "adding third.txt"
[master (root-commit) 94f927a] adding third.txt
 1 file changed, 1 insertion(+)
 create mode 100644 third.txt

C:\Users\omar\Desktop\learn_git>git log
commit 94f927a9821370245305ae80ab359a66688fd42a (HEAD -> master)
Author: omarmechergui <oo2377107@gmail.com>
Date:   Wed Oct 9 11:13:54 2024 +0100

    adding third.txt

C:\Users\omar\Desktop\learn_git>echo > fourth.txt

C:\Users\omar\Desktop\learn_git>git add .

C:\Users\omar\Desktop\learn_git>git commit -m "adding fourth.txt"
[master a70a089] adding fourth.txt
 1 file changed, 1 insertion(+)
 create mode 100644 fourth.txt

C:\Users\omar\Desktop\learn_git>git rm third.txt
rm 'third.txt'

C:\Users\omar\Desktop\learn_git>git add .

C:\Users\omar\Desktop\learn_git>git commit -m "removing third.txt"
[master 7e2979a] removing third.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 third.txt

C:\Users\omar\Desktop\learn_git>git log
commit 7e2979a4c5de22642f4928fea7556fcd1ae4f091 (HEAD -> master)
Author: omarmechergui <oo2377107@gmail.com>
Date:   Wed Oct 9 11:20:35 2024 +0100

    removing third.txt

commit a70a089addb8718e937f23a06854d9fedd05d91d
Author: omarmechergui <oo2377107@gmail.com>
Date:   Wed Oct 9 11:17:03 2024 +0100

    adding fourth.txt

commit 94f927a9821370245305ae80ab359a66688fd42a
Author: omarmechergui <oo2377107@gmail.com>
Date:   Wed Oct 9 11:13:54 2024 +0100

    adding third.txt

C:\Users\omar\Desktop\learn_git>git config --global core.pager "cat"

C:\Users\omar\Desktop\learn_git>git config --global list
error: key does not contain a section: list

C:\Users\omar\Desktop\learn_git>git config --global --list
user.name=omarmechergui
user.email=oo2377107@gmail.com
core.pager=cat

C:\Users\omar\Desktop\learn_git>git config --global
error: no action specified

C:\Users\omar\Desktop\learn_git>git config
error: no action specified

C:\Users\omar\Desktop\learn_git>git --help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]
           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]
           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

